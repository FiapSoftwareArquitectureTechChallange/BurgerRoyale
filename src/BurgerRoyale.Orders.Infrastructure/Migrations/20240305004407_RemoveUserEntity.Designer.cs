// <auto-generated />
using System;
using BurgerRoyale.Orders.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurgerRoyale.Orders.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240305004407_RemoveUserEntity")]
    partial class RemoveUserEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PaymentRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8049bb07-1c09-4ce6-aaa4-a8475f46a0e6"),
                            Category = 0,
                            Description = "Hambúrguer de carne bovina.",
                            Name = "Burger Tradicional",
                            Price = 19.2m
                        },
                        new
                        {
                            Id = new Guid("95ca0d02-3783-4b2b-a805-bea43f5a8ec1"),
                            Category = 0,
                            Description = "Hambúrguer de carne bovina com o dobro de bacon.",
                            Name = "Burger Duplo Bacon",
                            Price = 22.9m
                        },
                        new
                        {
                            Id = new Guid("47850b52-17d0-4f2c-8f3c-413abb1d976b"),
                            Category = 0,
                            Description = "Hambúrguer de carne bovina com o dobro de cheddar.",
                            Name = "Burger Duplo Cheddar",
                            Price = 23.9m
                        },
                        new
                        {
                            Id = new Guid("f1de9802-a0b0-4b9f-a814-8e8622e67ce7"),
                            Category = 1,
                            Description = "Porção de fritas pequena.",
                            Name = "Fritas Pequena",
                            Price = 4.9m
                        },
                        new
                        {
                            Id = new Guid("3cd19be6-8e13-423e-a203-87f7a31c61c5"),
                            Category = 1,
                            Description = "Porção de fritas.",
                            Name = "Fritas",
                            Price = 6.9m
                        },
                        new
                        {
                            Id = new Guid("e82dfd7b-64c6-4121-ad0b-a9027ee0773c"),
                            Category = 1,
                            Description = "Porção de fritas grande.",
                            Name = "Fritas Grande",
                            Price = 8.9m
                        },
                        new
                        {
                            Id = new Guid("9b34391e-296f-4005-bbb1-721374f2516a"),
                            Category = 2,
                            Description = "500 ml com ou sem gás",
                            Name = "Água",
                            Price = 4m
                        },
                        new
                        {
                            Id = new Guid("cb3d778f-a648-49c6-8460-a8aa26144219"),
                            Category = 2,
                            Description = "Copo 400 ml",
                            Name = "Refrigerante",
                            Price = 6m
                        },
                        new
                        {
                            Id = new Guid("e94c8cb4-e7bf-4a39-b6f8-5ea07090fd03"),
                            Category = 3,
                            Description = "Sundae de diversos sabores",
                            Name = "Sundae",
                            Price = 7m
                        },
                        new
                        {
                            Id = new Guid("f5271c70-e7bd-4896-9eef-c19132756500"),
                            Category = 3,
                            Description = "Sorvete de diversos sabores",
                            Name = "Sorvete",
                            Price = 7m
                        });
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("BurgerRoyale.Orders.Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerRoyale.Orders.Domain.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("BurgerRoyale.Orders.Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
