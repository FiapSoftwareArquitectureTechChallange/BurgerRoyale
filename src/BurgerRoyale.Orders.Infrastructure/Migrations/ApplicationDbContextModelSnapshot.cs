// <auto-generated />
using System;
using BurgerRoyale.Orders.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurgerRoyale.Orders.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c61a088-de0b-41f1-b1ad-8b60c4a9a7b8"),
                            Category = 0,
                            Description = "Hambúrguer de carne bovina.",
                            Name = "Burger Tradicional",
                            Price = 19.2m
                        },
                        new
                        {
                            Id = new Guid("a86a32f1-fec8-42b0-a24b-20e04323131e"),
                            Category = 0,
                            Description = "Hambúrguer de carne bovina com o dobro de bacon.",
                            Name = "Burger Duplo Bacon",
                            Price = 22.9m
                        },
                        new
                        {
                            Id = new Guid("a5fad99b-b768-4a85-9267-0b68bea75ee0"),
                            Category = 0,
                            Description = "Hambúrguer de carne bovina com o dobro de cheddar.",
                            Name = "Burger Duplo Cheddar",
                            Price = 23.9m
                        },
                        new
                        {
                            Id = new Guid("50923883-cb40-4066-b339-614ec0363614"),
                            Category = 1,
                            Description = "Porção de fritas pequena.",
                            Name = "Fritas Pequena",
                            Price = 4.9m
                        },
                        new
                        {
                            Id = new Guid("39d429d4-0ec7-46a4-b42d-976451956e12"),
                            Category = 1,
                            Description = "Porção de fritas.",
                            Name = "Fritas",
                            Price = 6.9m
                        },
                        new
                        {
                            Id = new Guid("b367c8ca-d026-45fa-bb71-cf99051f3671"),
                            Category = 1,
                            Description = "Porção de fritas grande.",
                            Name = "Fritas Grande",
                            Price = 8.9m
                        },
                        new
                        {
                            Id = new Guid("ed494baa-563b-4822-8ebf-e600eb82efdc"),
                            Category = 2,
                            Description = "500 ml com ou sem gás",
                            Name = "Água",
                            Price = 4m
                        },
                        new
                        {
                            Id = new Guid("30baa9a0-7c40-4352-b246-bf7497b6702b"),
                            Category = 2,
                            Description = "Copo 400 ml",
                            Name = "Refrigerante",
                            Price = 6m
                        },
                        new
                        {
                            Id = new Guid("73269e58-bb76-433a-846f-1ac7ea9170d5"),
                            Category = 3,
                            Description = "Sundae de diversos sabores",
                            Name = "Sundae",
                            Price = 7m
                        },
                        new
                        {
                            Id = new Guid("02a0b895-e092-47ce-94c0-e98286182b6b"),
                            Category = 3,
                            Description = "Sorvete de diversos sabores",
                            Name = "Sorvete",
                            Price = 7m
                        });
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("BurgerRoyale.Orders.Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerRoyale.Orders.Domain.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("BurgerRoyale.Orders.Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("BurgerRoyale.Orders.Domain.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
