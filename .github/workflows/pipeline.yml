name: Pipeline

on:
  push:
    branches: [ "main", "develop", "pipeline-2"]
  pull_request:
    branches: [ "main", "develop"]
  
env:
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 7
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
      
    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Unit Tests
      run: |
        cd tests/BurgerRoyale.UnitTests
        dotnet test
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_RAFFA }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_RAFFA }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_RAFFA }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: burgerroyale
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        echo sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g"

        sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g"
        kubectl apply -f mssqlserver-pv.yaml
        kubectl apply -f mssqlserver-pvc.yaml

        kubectl apply -f mssqlserver-deployment.yaml
        kubectl apply -f mssqlserver-svc.yaml

        kubectl apply -f api-deployment.yaml
        kubectl apply -f api-svc.yaml

        kubectl apply -f metricserver-deployment.yaml

        kubectl apply -f api-scaleobject.yaml